###############################################################################
#
# TODO: Add comment
#
# Oct 22, 2011
# 11:37:31 AM
# Author: Reinhard Simon (rsimon)
# (c) International Potato Center
#
###############################################################################

calc.ranks <- function(fp){
  sheetName="Ranks by Clone"
  clear.sheet(sheetName,fp)
  
  vl = read.excel(fp, "Var List")
  #vl = read.xlsx(fp,sheetName="Var List", h=T, stringsAsFactors=F)
  #an = "x"%in%vl$Analyze | "X"%in%vl$Analyze 
  vl$Selection.weight = as.numeric(vl$Selection.weight)
  an = ("x"%in%vl$Analyze | "X"%in%vl$Analyze) & (which(vl$Selection.weight>0)) 
  #print(an)
  #print(nrow(vl))
  if(length(an)>0){
    vl = vl[which(tolower(vl$Selection.weight)>0),c("Abbreviations","Selection.direction","Selection.weight")]
    #write.xls("Insufficient data for calculating ranks.",fp,sheet="Ranks by clone")
    #print("chau")
    #return()
    #} else {
    #print(vl)
    va  = vl[,"Abbreviations"]
    
#     vnm = paste(vl[,"Abbreviations"],"_mean_","mother",sep="")
#     vnb = paste(vl[,"Abbreviations"],"_mean_","baby",sep="")
        
    #TODO handle case when less than 2 are marked
    #better handling of missing values for missing sel.dir and sel.weight
    #print("check 1")
    sc = read.excel(fp, "Summary By Clone M&B")
    
    
    nc=names(sc)  #criteria of selection names
    vnm = nc[str_detect(nc,"mean_mother")]
    vnb = nc[str_detect(nc,"mean_baby")]
    vnc = nc[str_detect(nc,"mean_SH|mean_SF")]   #criteria of selection 
    
    dbm = sc[,vnm]
    dbb = sc[,vnb]
    dnc = sc[,vnc]
    
    
    #Handle case when count of x=1
    dbm = as.data.frame(dbm)	
    dbb = as.data.frame(dbb)
    dnc = as.data.frame(dnc)

    names(dbm)=vnm
    names(dbb)=vnb
    names(dnc)=vnc
    
    for(i in 1:ncol(dbm)) dbm[,i]=as.numeric(dbm[,i])
    for(i in 1:ncol(dbb)) dbb[,i]=as.numeric(dbb[,i])
    for(i in 1:ncol(dnc)) dnc[,i]=as.numeric(dnc[,i])

    #print(db)
    
    vm = apply(dbm,2,scale)
    vb = apply(dbb,2,scale)
    vc = apply(dnc,2,scale)

    row.names(vm) = sc$INSTN
    row.names(vb) = sc$INSTN
    row.names(vc) = sc$INSTN
    
    
    # remove columns where NaN
    nanm = rep(FALSE,ncol(vm))
    nanb = rep(FALSE,ncol(vb))
    nanc = rep(FALSE,ncol(vc))    



    
    for(i in 1:ncol(dbm)) {
      nanm[i] = is.nan(vm[1,i])
      }
    
    for(i in 1:ncol(dbb)) {
         nanb[i]=is.nan(vb[1,i])
      }
  
    for(i in 1:ncol(dnc)) {
        nanc[i]=is.nan(vc[1,i])
      }


    vm = vm[,!nanm]
    vb = vb[,!nanb]
    vc = vc[,!nanc]
    
    dbm = dbm[,!nanm]
    dbb = dbb[,!nanb]
    dnc = dnc[,!nanc]
    

    #Handle case when count of x=1
    dbm = as.data.frame(dbm)	
    dbb = as.data.frame(dbb)
    dnc = as.data.frame(dnc)    


    #print(vn)
    #print(names(db))
    #names(db)=vn
    
    vam = rep("",ncol(dbm))
    vab = rep("",ncol(dbb))
    vac = rep("",ncol(dnc))
    
    
    
    if(ncol(dbm)>1){
      for(i in 1:ncol(dbm)) vam[i] = str_replace(names(dbm)[i],"_Mean","")
    } else {
      names(dbm)=vlm[1,1]
      vam = names(dbm)
    }
    
    
    if(ncol(dbb)>1){
      for(i in 1:ncol(dbb)) vab[i] = str_replace(names(dbb)[i],"_Mean","")
    } else {
      names(dbb)=vlb[1,1]
      vab = names(dbb)
    }
    
    if(ncol(dnc)>1){
      for(i in 1:ncol(dnc)) vac[i] = str_replace(names(dnc)[i],"_Mean","")
    } else {
      names(dnc)=vlc[1,1]
      vac = names(dnc)
    }

    
    
    vl = vl[vl[,1]%in%va,]
    #print("check 2")
    vd = vl[,"Selection.direction"]
    vw = vl[,"Selection.weight"]
    #print(str(vd))
    #print(vw)
    #print(va)
    #print(vl)
    #print(length(vd))
    for(i in 1:length(vd)) {
      if(is.na(vd[i])) vd[i]="1"
      if(is.na(vw[i])) vw[i]="1"
      if(nchar(vd[i])==0) vd[i]="1"
      if(vd[i]=="+") vd[i]="1"
      if(vd[i]=="-") vd[i]="-1"
      if(nchar(vw[i])==0) vw[i]="1"
    }
    vd = as.integer(vd)
    #print("-------")
    #print(vd)
    #print("check 3")
    #filter only those 
    vf = vd!=0 
    
    ####otra vez mama y bebe
    
    vn1m =  nc[str_detect(nc,"mean_mother")]
    vn1b =  nc[str_detect(nc,"mean_baby")]
    vn1c =  nc[str_detect(nc,"mean_SH|mean_SF")] 
   
    #print(vn1)
    vn1m = vn1m[complete.cases(vn1m[vf])]
    vn1b = vn1b[complete.cases(vn1b[vf])]
    vn1c = vn1c[complete.cases(vn1c[vf])]
    
    dbm = sc[,vn1m]
    dbb = sc[,vn1b]
    dbc = sc[,vn1c]    
    


    #print(db)
    #print("==========================")
    #Handle case when count of x=1
    if(length(vn1m)==1) dbm=as.numeric(dbm)
    if(length(vn1b)==1) dbb=as.numeric(dbb)
    if(length(vn1c)==1) dbc=as.numeric(dbc)
    
    dbm = as.data.frame(dbm)	
    dbb = as.data.frame(dbb)  
    dbc = as.data.frame(dbc)
    
    
    names(dbm)=vnm
    names(dbb)=vnb
    names(dbc)=vnc    



    for(i in 1:ncol(dbm)) dbm[,i]=as.numeric(dbm[,i])
    for(i in 1:ncol(dbb)) dbb[,i]=as.numeric(dbb[,i])
    for(i in 1:ncol(dbc)) dbc[,i]=as.numeric(dbc[,i])
    
    #print(db)
    #print(str(db))
    #print("==========================")
    vw = as.numeric(vw[vf])
    #print(db)
    #print(str(db))
    #print(str(vd))
    #for(i in 1:ncol(db)) db[,i]=as.numeric(db[,i])
    for(i in 1:ncol(dbm)) dbm[,i]=dbm[,i]*vd[i]
    for(i in 1:ncol(dbb)) dbb[,i]=dbb[,i]*vd[i]
    for(i in 1:ncol(dbc)) dbc[,i]=dbc[,i]*vd[i]
    
    #print(db)
    #print("==========================")
    
    vm = apply(dbm,2,scale)
    vb = apply(dbb,2,scale)
    vc = apply(dbc,2,scale)
    
    #print(v)
    #print("==========================")
    row.names(vm) = sc$INSTN
    row.names(vb) = sc$INSTN
    row.names(vc) = sc$INSTN
    
    nnm = ncol(vm)
    nnb = ncol(vb)
    nnc = ncol(vc)
    
    
    rsim = rowSums(vm, na.rm=T)
    rsib = rowSums(vb, na.rm=T)
    rsic = rowSums(vc, na.rm=T)    


    rssm = scale(rsim)
    rssb = scale(rsib)
    rssc = scale(rsic)
    
    
    # SSD index calculation
    swd <- numeric(nrow(dbm))
    for (j in 1:nrow(dbm)) {
      #for all genotypes
      for (i in 1:ncol(dbm)) {
        # for one genotype add up over variables
        if(!is.na(vm[j,i])){
          swd[j] <- swd[j] + (vm[j, i] * vw[i])
        }
      }
    }
    swdm <- scale(swd) #rescale
    
    ######
    swd <- numeric(nrow(dbb))
    for (j in 1:nrow(dbb)) {
      #for all genotypes
      for (i in 1:ncol(dbb)) {
        # for one genotype add up over variables
        if(!is.na(vb[j,i])){
          swd[j] <- swd[j] + (vb[j, i] * vw[i])
        }
      }
    }
    
    swdb <- scale(swd) #rescale
    
    swd <- numeric(nrow(dbc))
    for (j in 1:nrow(dbc)) {
      #for all genotypes
      for (i in 1:ncol(dbc)) {
        # for one genotype add up over variables
        if(!is.na(vc[j,i])){
          swd[j] <- swd[j] + (vc[j, i] * vw[i])
        }
      }
    }
    
    swdc <- scale(swd) #rescale




    eim <- numeric(nrow(dbm))
    for (i in 1:length(eim)) eim[i] <- 1
    for (j in 1:nrow(dbm)) {
      for (i in 1:ncol(dbm)) {
        if(!is.na(vm[j,i])){
          eim[j] <- eim[j] * vm[j, i]
        }
      }
    }
    eimm <- scale(eim)	
    
    
    eim <- numeric(nrow(dbb))
    for (i in 1:length(eim)) eim[i] <- 1
    for (j in 1:nrow(dbb)) {
      for (i in 1:ncol(dbb)) {
        if(!is.na(vb[j,i])){
          eim[j] <- eim[j] * vb[j, i]
        }
      }
    }
    eimb <- scale(eim)  

    eim <- numeric(nrow(dbc))
    for (i in 1:length(eim)) eim[i] <- 1
    for (j in 1:nrow(dbc)) {
      for (i in 1:ncol(dbc)) {
        if(!is.na(vc[j,i])){
          eim[j] <- eim[j] * vb[j, i]
        }
      }
    }
    eimc <- scale(eim)  


    
       
    vb.m = dbm
    vb.b = dbb
    vb.c = dbc

    
    for(i in 1:ncol(dbm)) vb.m[,i]=as.numeric(dbm[,i])*vd[i]
    for(i in 1:ncol(dbb)) vb.b[,i]=as.numeric(dbb[,i])*vd[i]
    for(i in 1:ncol(dbc)) vb.c[,i]=as.numeric(dbc[,i])*vd[i]


        
    vmm = cbind(vb.m, vm, rssm, swdm, eimm)
    vbb = cbind(vb.b, vb, rssb, swdb, eimb)
    vcc = cbind(vb.c, vc, rssc, swdc, eimc)



    vmm = as.data.frame(vmm)
    vbb = as.data.frame(vbb)
    vcc = as.data.frame(vcc)
    
    
    #names(v)[(ncol(v)-2):ncol(v)]=c("RSS","SWD","EIM")
    names(vmm)[(ncol(vmm)-2):ncol(vmm)]=c("RSS","SWD","EIM")
    names(vbb)[(ncol(vbb)-2):ncol(vbb)]=c("RSS","SWD","EIM")
    names(vcc)[(ncol(vcc)-2):ncol(vcc)]=c("RSS","SWD","EIM")

    
    
    #	print(v)
    vmm = vmm[do.call(order, -vmm["RSS"]), ]
    vbb = vbb[do.call(order, -vbb["RSS"]), ]
    vcc = vcc[do.call(order, -vcc["RSS"]), ]

    
    vmm = cbind(row.names(vmm),vmm)
    names(vmm)[1]="INSTN"
    names(vmm)[(nnm+2):ncol(vmm)]=as.character(sapply(names(vmm)[(nnm+2):ncol(vmm)], str_replace,"_Mean","_Rank"))
    
    vbb = cbind(row.names(vbb),vbb)
    names(vbb)[1]="INSTN"
    names(vbb)[(nnb+2):ncol(vbb)]=as.character(sapply(names(vbb)[(nnb+2):ncol(vbb)], str_replace,"_Mean","_Rank"))
    
    vcc=cbind(row.names(vcc),vcc)
    names(vcc)[1]="INSTN"
    names(vcc)[(nnc+2):ncol(vcc)]=as.character(sapply(names(vcc)[(nnc+2):ncol(vcc)], str_replace,"_Mean","_Rank"))

    
    
#     names(v)[1]="INSTN"
#     names(v)[(nn+2):ncol(v)]=as.character(sapply(names(v)[(nn+2):ncol(v)], str_replace,"_mean","_Rank"))
#     #write.xlsx2(v,file=fp,sheetName="Ranks by clone",append=T, row.names=F)
    #print("write ranks")
    
    p=merge(vmm,vbb,by="INSTN")
    p=merge(p,vcc,by="INSTN")    


    try(write.xls(p,"C:/Documents and Settings/obenites.CIP_LIMA/Desktop/ranks.xlsx",sheet=sheetName))
    #print("Write ranks ok")
  }
  "ok"
}
